{"ast":null,"code":"const today = new Date();\nconst currentYear = today.getFullYear();\nconst currentMonth = today.getMonth();\nconst firstDayOfMonth = new Date(currentYear, currentMonth, 1);\nconst lastDayOfMonth = new Date(currentYear, currentMonth + 1, 0);\nconst startDay = firstDayOfMonth.getDay(); // 0 (niedziela) do 6 (sobota)\nconst daysInMonth = [];\nconst calendar = [];\nconst totalDaysInMonth = lastDayOfMonth.getDate();\n\n// Dodajemy puste miejsca przed pierwszym dniem miesiąca, jeśli miesiąc nie zaczyna się w niedzielę\nfor (let i = 0; i < startDay; i++) {\n  daysInMonth.push(null);\n}\n\n// Dodajemy dni miesiąca\nfor (let i = 1; i <= totalDaysInMonth; i++) {\n  daysInMonth.push(i);\n}\n\n// Jeśli po dodaniu wszystkich dni miesiąca liczba dni w ostatnim tygodniu nie wynosi 7, to dodajemy odpowiednią liczbę nulli, aby wypełnić tydzień\nwhile (daysInMonth.length % 7 !== 0) {\n  daysInMonth.push(null);\n}\n\n// Dzielenie dni na tygodnie\nfor (let i = 0; i < daysInMonth.length; i += 7) {\n  calendar.push(daysInMonth.slice(i, i + 7));\n}\n\n// Pełne nazwy dni tygodnia\nconst daysOfWeek = [\"Sunday\", \"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\"];\n\n// Wyświetlanie kalendarza\nconsole.log(daysOfWeek.join(' '));\ncalendar.forEach(week => {\n  const weekStr = week.map(day => day !== null ? day.toString().padStart(7, ' ') : '       ').join(' ');\n  console.log(weekStr);\n});","map":{"version":3,"names":["today","Date","currentYear","getFullYear","currentMonth","getMonth","firstDayOfMonth","lastDayOfMonth","startDay","getDay","daysInMonth","calendar","totalDaysInMonth","getDate","i","push","length","slice","daysOfWeek","console","log","join","forEach","week","weekStr","map","day","toString","padStart"],"sources":["C:/Project/todolist/src/Components/Calendar.tsx"],"sourcesContent":["const today = new Date();\r\nconst currentYear = today.getFullYear();\r\nconst currentMonth = today.getMonth();\r\n\r\nconst firstDayOfMonth = new Date(currentYear, currentMonth, 1);\r\nconst lastDayOfMonth = new Date(currentYear, currentMonth + 1, 0);\r\n\r\nconst startDay = firstDayOfMonth.getDay(); // 0 (niedziela) do 6 (sobota)\r\nconst daysInMonth: (number | null)[] = [];\r\nconst calendar: (number | null)[][] = [];\r\n\r\nconst totalDaysInMonth = lastDayOfMonth.getDate();\r\n\r\n// Dodajemy puste miejsca przed pierwszym dniem miesiąca, jeśli miesiąc nie zaczyna się w niedzielę\r\nfor (let i = 0; i < startDay; i++) {\r\n    daysInMonth.push(null);\r\n}\r\n\r\n// Dodajemy dni miesiąca\r\nfor (let i = 1; i <= totalDaysInMonth; i++) {\r\n    daysInMonth.push(i);\r\n}\r\n\r\n// Jeśli po dodaniu wszystkich dni miesiąca liczba dni w ostatnim tygodniu nie wynosi 7, to dodajemy odpowiednią liczbę nulli, aby wypełnić tydzień\r\nwhile (daysInMonth.length % 7 !== 0) {\r\n    daysInMonth.push(null);\r\n}\r\n\r\n// Dzielenie dni na tygodnie\r\nfor (let i = 0; i < daysInMonth.length; i += 7) {\r\n    calendar.push(daysInMonth.slice(i, i + 7));\r\n}\r\n\r\n// Pełne nazwy dni tygodnia\r\nconst daysOfWeek = [\"Sunday\", \"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\"];\r\n\r\n// Wyświetlanie kalendarza\r\nconsole.log(daysOfWeek.join(' '));\r\ncalendar.forEach(week => {\r\n    const weekStr = week.map(day => (day !== null ? day.toString().padStart(7, ' ') : '       ')).join(' ');\r\n    console.log(weekStr);\r\n});\r\n"],"mappings":"AAAA,MAAMA,KAAK,GAAG,IAAIC,IAAI,CAAC,CAAC;AACxB,MAAMC,WAAW,GAAGF,KAAK,CAACG,WAAW,CAAC,CAAC;AACvC,MAAMC,YAAY,GAAGJ,KAAK,CAACK,QAAQ,CAAC,CAAC;AAErC,MAAMC,eAAe,GAAG,IAAIL,IAAI,CAACC,WAAW,EAAEE,YAAY,EAAE,CAAC,CAAC;AAC9D,MAAMG,cAAc,GAAG,IAAIN,IAAI,CAACC,WAAW,EAAEE,YAAY,GAAG,CAAC,EAAE,CAAC,CAAC;AAEjE,MAAMI,QAAQ,GAAGF,eAAe,CAACG,MAAM,CAAC,CAAC,CAAC,CAAC;AAC3C,MAAMC,WAA8B,GAAG,EAAE;AACzC,MAAMC,QAA6B,GAAG,EAAE;AAExC,MAAMC,gBAAgB,GAAGL,cAAc,CAACM,OAAO,CAAC,CAAC;;AAEjD;AACA,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGN,QAAQ,EAAEM,CAAC,EAAE,EAAE;EAC/BJ,WAAW,CAACK,IAAI,CAAC,IAAI,CAAC;AAC1B;;AAEA;AACA,KAAK,IAAID,CAAC,GAAG,CAAC,EAAEA,CAAC,IAAIF,gBAAgB,EAAEE,CAAC,EAAE,EAAE;EACxCJ,WAAW,CAACK,IAAI,CAACD,CAAC,CAAC;AACvB;;AAEA;AACA,OAAOJ,WAAW,CAACM,MAAM,GAAG,CAAC,KAAK,CAAC,EAAE;EACjCN,WAAW,CAACK,IAAI,CAAC,IAAI,CAAC;AAC1B;;AAEA;AACA,KAAK,IAAID,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGJ,WAAW,CAACM,MAAM,EAAEF,CAAC,IAAI,CAAC,EAAE;EAC5CH,QAAQ,CAACI,IAAI,CAACL,WAAW,CAACO,KAAK,CAACH,CAAC,EAAEA,CAAC,GAAG,CAAC,CAAC,CAAC;AAC9C;;AAEA;AACA,MAAMI,UAAU,GAAG,CAAC,QAAQ,EAAE,QAAQ,EAAE,SAAS,EAAE,WAAW,EAAE,UAAU,EAAE,QAAQ,EAAE,UAAU,CAAC;;AAEjG;AACAC,OAAO,CAACC,GAAG,CAACF,UAAU,CAACG,IAAI,CAAC,GAAG,CAAC,CAAC;AACjCV,QAAQ,CAACW,OAAO,CAACC,IAAI,IAAI;EACrB,MAAMC,OAAO,GAAGD,IAAI,CAACE,GAAG,CAACC,GAAG,IAAKA,GAAG,KAAK,IAAI,GAAGA,GAAG,CAACC,QAAQ,CAAC,CAAC,CAACC,QAAQ,CAAC,CAAC,EAAE,GAAG,CAAC,GAAG,SAAU,CAAC,CAACP,IAAI,CAAC,GAAG,CAAC;EACvGF,OAAO,CAACC,GAAG,CAACI,OAAO,CAAC;AACxB,CAAC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}