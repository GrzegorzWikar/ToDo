{"ast":null,"code":"var _jsxFileName = \"C:\\\\Project\\\\todolist\\\\src\\\\Components\\\\WeekView.tsx\";\n// src/components/WeekView.tsx\nimport React from 'react';\nimport { Row, Col, Container } from 'react-bootstrap';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst WeekView = ({\n  selectedDate\n}) => {\n  const startOfWeek = new Date(selectedDate);\n  startOfWeek.setDate(startOfWeek.getDate() - startOfWeek.getDay() + 1); // Ustaw na poniedziałek\n\n  const daysOfWeek = [];\n  for (let i = 0; i < 7; i++) {\n    const day = new Date(startOfWeek);\n    day.setDate(startOfWeek.getDate() + i);\n    daysOfWeek.push(day);\n  }\n  return /*#__PURE__*/_jsxDEV(Container, {\n    className: \"mt-4\",\n    children: /*#__PURE__*/_jsxDEV(Row, {\n      children: daysOfWeek.map(day => /*#__PURE__*/_jsxDEV(Col, {\n        className: \"border\",\n        children: [/*#__PURE__*/_jsxDEV(\"h5\", {\n          className: \"text-center\",\n          children: day.toLocaleDateString()\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 21,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"border\",\n          children: /*#__PURE__*/_jsxDEV(ScheduleGrid, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 23,\n            columnNumber: 29\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 22,\n          columnNumber: 25\n        }, this)]\n      }, day.toDateString(), true, {\n        fileName: _jsxFileName,\n        lineNumber: 20,\n        columnNumber: 21\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 18,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 17,\n    columnNumber: 9\n  }, this);\n};\n\n// Komponent siatki godzinowej\n_c = WeekView;\nconst ScheduleGrid = () => {\n  const startHour = 0; // Początkowa godzina\n  const endHour = 24; // Końcowa godzina\n\n  // Generowanie przedziałków godzinowych co 15 minut\n  const timeSlots = [];\n  for (let hour = startHour; hour < endHour; hour++) {\n    for (let minute = 0; minute < 60; minute += 15) {\n      const time = `${hour.toString().padStart(2, '0')}:${minute.toString().padStart(2, '0')}`;\n      timeSlots.push( /*#__PURE__*/_jsxDEV(Row, {\n        className: \"border\",\n        children: [/*#__PURE__*/_jsxDEV(Col, {\n          className: \"p-1\",\n          children: time\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 44,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Col, {\n          className: \"p-1\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 47,\n          columnNumber: 21\n        }, this)]\n      }, time, true, {\n        fileName: _jsxFileName,\n        lineNumber: 43,\n        columnNumber: 17\n      }, this));\n    }\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: timeSlots\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 56,\n    columnNumber: 9\n  }, this);\n};\n_c2 = ScheduleGrid;\nexport default WeekView;\nvar _c, _c2;\n$RefreshReg$(_c, \"WeekView\");\n$RefreshReg$(_c2, \"ScheduleGrid\");","map":{"version":3,"names":["React","Row","Col","Container","jsxDEV","_jsxDEV","WeekView","selectedDate","startOfWeek","Date","setDate","getDate","getDay","daysOfWeek","i","day","push","className","children","map","toLocaleDateString","fileName","_jsxFileName","lineNumber","columnNumber","ScheduleGrid","toDateString","_c","startHour","endHour","timeSlots","hour","minute","time","toString","padStart","_c2","$RefreshReg$"],"sources":["C:/Project/todolist/src/Components/WeekView.tsx"],"sourcesContent":["// src/components/WeekView.tsx\r\nimport React from 'react';\r\nimport { Row, Col, Container } from 'react-bootstrap';\r\n\r\nconst WeekView: React.FC<{ selectedDate: Date }> = ({ selectedDate }) => {\r\n    const startOfWeek = new Date(selectedDate);\r\n    startOfWeek.setDate(startOfWeek.getDate() - startOfWeek.getDay() + 1); // Ustaw na poniedziałek\r\n\r\n    const daysOfWeek: Date[] = [];\r\n    for (let i = 0; i < 7; i++) {\r\n        const day = new Date(startOfWeek);\r\n        day.setDate(startOfWeek.getDate() + i);\r\n        daysOfWeek.push(day);\r\n    }\r\n\r\n    return (\r\n        <Container className=\"mt-4\">\r\n            <Row>\r\n                {daysOfWeek.map(day => (\r\n                    <Col key={day.toDateString()} className=\"border\">\r\n                        <h5 className=\"text-center\">{day.toLocaleDateString()}</h5>\r\n                        <div className=\"border\">\r\n                            <ScheduleGrid />\r\n                        </div>\r\n                    </Col>\r\n                ))}\r\n            </Row>\r\n        </Container>\r\n    );\r\n};\r\n\r\n// Komponent siatki godzinowej\r\nconst ScheduleGrid: React.FC = () => {\r\n    const startHour = 0; // Początkowa godzina\r\n    const endHour = 24;  // Końcowa godzina\r\n\r\n    // Generowanie przedziałków godzinowych co 15 minut\r\n    const timeSlots: JSX.Element[] = [];\r\n    for (let hour = startHour; hour < endHour; hour++) {\r\n        for (let minute = 0; minute < 60; minute += 15) {\r\n            const time = `${hour.toString().padStart(2, '0')}:${minute.toString().padStart(2, '0')}`;\r\n            timeSlots.push(\r\n                <Row key={time} className=\"border\">\r\n                    <Col className=\"p-1\">\r\n                        {time}\r\n                    </Col>\r\n                    <Col className=\"p-1\">\r\n                        {/* Tutaj możesz dodać komponenty do planowania */}\r\n                    </Col>\r\n                </Row>\r\n            );\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            {timeSlots}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default WeekView;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}