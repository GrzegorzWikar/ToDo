{"ast":null,"code":"var _jsxFileName = \"C:\\\\Project\\\\todolist\\\\src\\\\Components\\\\WeekView.tsx\";\n// src/components/WeekView.tsx\nimport React from 'react';\nimport { Row, Col, Container } from 'react-bootstrap';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst WeekView = ({\n  selectedDate\n}) => {\n  const startOfWeek = new Date(selectedDate);\n  startOfWeek.setDate(startOfWeek.getDate() - startOfWeek.getDay() + 1); // Ustaw na poniedziałek\n\n  const daysOfWeek = [];\n  for (let i = 0; i < 7; i++) {\n    const day = new Date(startOfWeek);\n    day.setDate(startOfWeek.getDate() + i);\n    daysOfWeek.push(day);\n  }\n  return /*#__PURE__*/_jsxDEV(Container, {\n    className: \"mt-4\",\n    children: [/*#__PURE__*/_jsxDEV(Row, {\n      className: \"text-center\",\n      children: [/*#__PURE__*/_jsxDEV(Col, {\n        xs: 2,\n        className: \"border\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 19,\n        columnNumber: 17\n      }, this), \" \", daysOfWeek.map(day => /*#__PURE__*/_jsxDEV(Col, {\n        className: \"border\",\n        children: /*#__PURE__*/_jsxDEV(\"h5\", {\n          children: day.toLocaleDateString()\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 22,\n          columnNumber: 25\n        }, this)\n      }, day.toDateString(), false, {\n        fileName: _jsxFileName,\n        lineNumber: 21,\n        columnNumber: 21\n      }, this))]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 18,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(ScheduleGrid, {\n      days: daysOfWeek\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 17,\n    columnNumber: 9\n  }, this);\n};\n\n// Komponent siatki godzinowej\n_c = WeekView;\nconst ScheduleGrid = ({\n  days\n}) => {\n  const startHour = 0; // Początkowa godzina\n  const endHour = 24; // Końcowa godzina\n\n  // Generowanie przedziałków godzinowych co 15 minut\n  const timeSlots = [];\n  for (let hour = startHour; hour < endHour; hour++) {\n    for (let minute = 0; minute < 60; minute += 15) {\n      const time = `${hour.toString().padStart(2, '0')}:${minute.toString().padStart(2, '0')}`;\n      timeSlots.push( /*#__PURE__*/_jsxDEV(Row, {\n        className: \"border\",\n        children: [/*#__PURE__*/_jsxDEV(Col, {\n          xs: 2,\n          className: \"p-1 border text-right\",\n          children: time\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 43,\n          columnNumber: 21\n        }, this), days.map((_, dayIndex) => /*#__PURE__*/_jsxDEV(Col, {\n          className: \"p-1 border\"\n        }, dayIndex, false, {\n          fileName: _jsxFileName,\n          lineNumber: 47,\n          columnNumber: 25\n        }, this))]\n      }, time, true, {\n        fileName: _jsxFileName,\n        lineNumber: 42,\n        columnNumber: 17\n      }, this));\n    }\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: timeSlots\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 57,\n    columnNumber: 9\n  }, this);\n};\n_c2 = ScheduleGrid;\nexport default WeekView;\nvar _c, _c2;\n$RefreshReg$(_c, \"WeekView\");\n$RefreshReg$(_c2, \"ScheduleGrid\");","map":{"version":3,"names":["React","Row","Col","Container","jsxDEV","_jsxDEV","WeekView","selectedDate","startOfWeek","Date","setDate","getDate","getDay","daysOfWeek","i","day","push","className","children","xs","fileName","_jsxFileName","lineNumber","columnNumber","map","toLocaleDateString","toDateString","ScheduleGrid","days","_c","startHour","endHour","timeSlots","hour","minute","time","toString","padStart","_","dayIndex","_c2","$RefreshReg$"],"sources":["C:/Project/todolist/src/Components/WeekView.tsx"],"sourcesContent":["// src/components/WeekView.tsx\r\nimport React from 'react';\r\nimport { Row, Col, Container } from 'react-bootstrap';\r\n\r\nconst WeekView: React.FC<{ selectedDate: Date }> = ({ selectedDate }) => {\r\n    const startOfWeek = new Date(selectedDate);\r\n    startOfWeek.setDate(startOfWeek.getDate() - startOfWeek.getDay() + 1); // Ustaw na poniedziałek\r\n\r\n    const daysOfWeek: Date[] = [];\r\n    for (let i = 0; i < 7; i++) {\r\n        const day = new Date(startOfWeek);\r\n        day.setDate(startOfWeek.getDate() + i);\r\n        daysOfWeek.push(day);\r\n    }\r\n\r\n    return (\r\n        <Container className=\"mt-4\">\r\n            <Row className=\"text-center\">\r\n                <Col xs={2} className=\"border\"></Col> {/* Pusta kolumna na godziny */}\r\n                {daysOfWeek.map(day => (\r\n                    <Col key={day.toDateString()}  className=\"border\">\r\n                        <h5>{day.toLocaleDateString()}</h5>\r\n                    </Col>\r\n                ))}\r\n            </Row>\r\n            <ScheduleGrid days={daysOfWeek} />\r\n        </Container>\r\n    );\r\n};\r\n\r\n// Komponent siatki godzinowej\r\nconst ScheduleGrid: React.FC<{ days: Date[] }> = ({ days }) => {\r\n    const startHour = 0; // Początkowa godzina\r\n    const endHour = 24;  // Końcowa godzina\r\n\r\n    // Generowanie przedziałków godzinowych co 15 minut\r\n    const timeSlots: JSX.Element[] = [];\r\n    for (let hour = startHour; hour < endHour; hour++) {\r\n        for (let minute = 0; minute < 60; minute += 15) {\r\n            const time = `${hour.toString().padStart(2, '0')}:${minute.toString().padStart(2, '0')}`;\r\n            timeSlots.push(\r\n                <Row key={time} className=\"border\">\r\n                    <Col xs={2} className=\"p-1 border text-right\">\r\n                        {time}\r\n                    </Col>\r\n                    {days.map((_, dayIndex) => (\r\n                        <Col key={dayIndex} className=\"p-1 border\">\r\n                            {/* Tutaj możesz dodać komponenty do planowania */}\r\n                        </Col>\r\n                    ))}\r\n                </Row>\r\n            );\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            {timeSlots}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default WeekView;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}